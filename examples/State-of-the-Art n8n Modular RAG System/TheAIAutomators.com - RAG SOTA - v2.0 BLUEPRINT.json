{
  "name": "TheAIAutomators.com - RAG SOTA - v2.0 BLUEPRINT",
  "nodes": [
    {
      "parameters": {
        "public": true,
        "options": {
          "responseMode": "responseNode"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        -912,
        928
      ],
      "id": "a336d741-7562-4a63-98fd-81d4db59f9ce",
      "name": "When chat message received",
      "webhookId": "aebd971d-767d-4174-b3b0-d112910dd9b2"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-5",
          "mode": "list",
          "cachedResultName": "gpt-5"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -2160,
        1152
      ],
      "id": "75bd5139-b38c-4714-a9b1-28f998905afb",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "MM0xMOJkVoJoWOLP",
          "name": "OpenAi account AW"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1.2,
      "position": [
        3008,
        -160
      ],
      "id": "76c5b696-c4a4-456d-8da5-6e71c6b40863",
      "name": "Embeddings OpenAI1",
      "credentials": {
        "openAiApi": {
          "id": "MM0xMOJkVoJoWOLP",
          "name": "OpenAi account AW"
        }
      }
    },
    {
      "parameters": {
        "options": {
          "metadata": {
            "metadataValues": [
              {
                "name": "doc_id",
                "value": "={{ $('Set Data').first().json.doc_id }}"
              },
              {
                "name": "doc_name",
                "value": "={{ $('Set Data').first().json.doc_name }}"
              },
              {
                "name": "file_summary",
                "value": "={{ $('Enrich').item.json.output.document_summary }}"
              },
              {
                "name": "doc_type",
                "value": "={{ $('Set Data').first().json.doc_type }}"
              },
              {
                "name": "season",
                "value": "={{ $('Enrich').item.json.output.season }}"
              },
              {
                "name": "motorsport_category",
                "value": "={{ $('Enrich').item.json.output.motorsport_category }}"
              }
            ]
          }
        }
      },
      "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
      "typeVersion": 1,
      "position": [
        3120,
        -160
      ],
      "id": "e0b80786-2026-4d2b-869e-a9f2ada3be52",
      "name": "Default Data Loader"
    },
    {
      "parameters": {
        "chunkSize": 100000,
        "chunkOverlap": 10,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter",
      "typeVersion": 1,
      "position": [
        3168,
        0
      ],
      "id": "c386d27b-8c3f-410d-b96b-3f266f8bdd3b",
      "name": "Recursive Character Text Splitter"
    },
    {
      "parameters": {
        "mode": "insert",
        "tableName": {
          "__rl": true,
          "value": "documents_v2",
          "mode": "list",
          "cachedResultName": "documents_v2"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "typeVersion": 1.1,
      "position": [
        3056,
        -400
      ],
      "id": "6d5d6d08-f42f-4d4b-abf4-35aa831bef9a",
      "name": "Supabase Vector Store1",
      "credentials": {
        "supabaseApi": {
          "id": "wwbxqbDc4H2RPQ1Y",
          "name": "Supabase account (AW)"
        }
      }
    },
    {
      "parameters": {
        "type": "SHA256",
        "value": "={{ $json.text }}",
        "dataPropertyName": "hash"
      },
      "type": "n8n-nodes-base.crypto",
      "typeVersion": 1,
      "position": [
        -3216,
        -176
      ],
      "id": "7cb78fd8-0997-472b-9c5b-54aab91143b1",
      "name": "Generate Hash"
    },
    {
      "parameters": {
        "operation": "download",
        "fileId": {
          "__rl": true,
          "value": "={{ $('Loop Over Items').item.json.id }}",
          "mode": "id"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        -672,
        -2768
      ],
      "id": "295ea722-b873-41b4-95b1-a299f7294c2b",
      "name": "Download File",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "29hh4KY4MeILFO9p",
          "name": "Google Drive Account - TheAIAutomators Team"
        }
      }
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "record_manager_v2",
        "limit": 1,
        "filters": {
          "conditions": [
            {
              "keyName": "doc_id",
              "condition": "eq",
              "keyValue": "={{ $('Set Data').item.json.doc_id }}"
            },
            {
              "keyName": "hash",
              "condition": "eq",
              "keyValue": "={{ $json.hash }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -2976,
        -176
      ],
      "id": "151f3047-c119-46f5-8ad0-2387a33470b7",
      "name": "Search Record Manager",
      "alwaysOutputData": true,
      "credentials": {
        "supabaseApi": {
          "id": "wwbxqbDc4H2RPQ1Y",
          "name": "Supabase account (AW)"
        }
      }
    },
    {
      "parameters": {
        "tableId": "record_manager_v2",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "doc_id",
              "fieldValue": "={{ $('Set Data').item.json.doc_id }}"
            },
            {
              "fieldId": "hash",
              "fieldValue": "={{ $('Generate Hash').item.json.hash }}"
            },
            {
              "fieldId": "graph_id",
              "fieldValue": "={{ $json.foundDocumentId }}"
            },
            {
              "fieldId": "data_type",
              "fieldValue": "={{ $('Set Text (Merged)').item.json.data_type }}"
            },
            {
              "fieldId": "schema",
              "fieldValue": "={{ $('Set Text (Merged)').item.json.array_keys || null }}"
            },
            {
              "fieldId": "document_title",
              "fieldValue": "={{ $('New Files').item.json.name }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -2112,
        -288
      ],
      "id": "41a0d982-2a7d-444f-b0ff-f855ba483936",
      "name": "Create Row in Record Manager",
      "credentials": {
        "supabaseApi": {
          "id": "wwbxqbDc4H2RPQ1Y",
          "name": "Supabase account (AW)"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -3264,
        -2960
      ],
      "id": "f26cc10c-4ce4-494a-be34-f3bd685bbd9a",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "operation": "delete",
        "tableId": "documents_v2",
        "filterType": "string",
        "filterString": "=metadata->>doc_id=like.*{{ $('Loop Over Items').item.json.id }}*"
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -2384,
        0
      ],
      "id": "685d82d5-0bfe-4f02-85b1-67d816ec1bf8",
      "name": "Delete Previous Vectors",
      "alwaysOutputData": true,
      "credentials": {
        "supabaseApi": {
          "id": "wwbxqbDc4H2RPQ1Y",
          "name": "Supabase account (AW)"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "tableId": "record_manager_v2",
        "filters": {
          "conditions": [
            {
              "keyName": "id",
              "condition": "eq",
              "keyValue": "={{ $('Search Record Manager').item.json.id }}"
            }
          ]
        },
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "hash",
              "fieldValue": "={{ $('Generate Hash').item.json.hash }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -1808,
        0
      ],
      "id": "c6015482-7a00-4bd2-b7f9-b2552220dec7",
      "name": "Update our Record Manager",
      "credentials": {
        "supabaseApi": {
          "id": "wwbxqbDc4H2RPQ1Y",
          "name": "Supabase account (AW)"
        }
      }
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        -2128,
        0
      ],
      "id": "4732754c-3ec4-48b4-ad7a-87f590a6c3ae",
      "name": "Aggregate"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "a27d8259-8ed2-4638-8716-b60119b8f90c",
              "name": "text",
              "value": "={{ $json.content || $json.text }}",
              "type": "string"
            },
            {
              "id": "57ffce94-6b26-426f-9891-cd436002bf6d",
              "name": "data_type",
              "value": "unstructured",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2912,
        -2640
      ],
      "id": "2388ce40-cbba-4985-b311-0a59d8ad6d8d",
      "name": "Set Text"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "90016f21-d4be-4e57-a81a-5fe290f388b9",
              "name": "content",
              "value": "={{ $('Set Text (Merged)').item.json.text }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        336,
        -288
      ],
      "id": "593aed8f-929d-4835-8508-2384211128a2",
      "name": "Set up Text for Embedding"
    },
    {
      "parameters": {
        "operation": "text",
        "destinationKey": "content",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -272,
        -2640
      ],
      "id": "2e97875d-6ab6-40f7-8aa9-f33bad0025c7",
      "name": "Extract from File"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.mistral.ai/v1/files",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "mistralCloudApi",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "parameterType": "formBinaryData",
              "name": "file",
              "inputDataFieldName": "data"
            },
            {
              "name": "purpose",
              "value": "ocr"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -112,
        -2896
      ],
      "id": "63ca307c-5227-4b40-a85a-7f6db89253bb",
      "name": "Upload File",
      "credentials": {
        "mistralCloudApi": {
          "id": "rmhBwssORDiWOBKN",
          "name": "Mistral Cloud account"
        }
      }
    },
    {
      "parameters": {
        "url": "=https://api.mistral.ai/v1/files/{{ $json.id }}/url",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "mistralCloudApi",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "expiry",
              "value": "24"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Accept",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        608,
        -2896
      ],
      "id": "279dad84-6b54-4fe6-8ab1-a4b1b2442fe3",
      "name": "HTTP Request",
      "credentials": {
        "mistralCloudApi": {
          "id": "rmhBwssORDiWOBKN",
          "name": "Mistral Cloud account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.mistral.ai/v1/ocr",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "mistralCloudApi",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"model\": \"mistral-ocr-latest\",\n  \"document\": {\n    \"type\": \"document_url\",\n    \"document_url\": \"{{ $json.url }}\"\n  },\n  \"include_image_base64\": true\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1056,
        -2896
      ],
      "id": "d0087142-8eab-44ad-8de1-347c4b19ec9c",
      "name": "HTTP Request1",
      "credentials": {
        "mistralCloudApi": {
          "id": "rmhBwssORDiWOBKN",
          "name": "Mistral Cloud account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5aadca7f-8f88-417f-b80e-a14bb79f6990",
              "name": "content",
              "value": "={{ $json.pages.map(p => p.markdown).join('\\n\\n') }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1328,
        -2896
      ],
      "id": "0c1e2f33-d4ea-493e-881b-a2514a32484c",
      "name": "Aggregate Markdown"
    },
    {
      "parameters": {
        "content": "## Record Manager Router\n\n### 0. New Document\nAdd to Record Manager and Vector Store \n\n### 1. No Change to Doc\nMove to next file\n\n### 2. Changed Document \nDelete old vectors and add new ones",
        "height": 820,
        "width": 1660,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -3264,
        -544
      ],
      "id": "713fccab-da85-4500-83cf-c455b45449b1",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "triggerOn": "specificFolder",
        "folderToWatch": {
          "__rl": true,
          "value": "1S_Q-4SYtpAS_vBNwDxRsgaKs0Y6e9pT2",
          "mode": "list",
          "cachedResultName": "RAG files",
          "cachedResultUrl": "https://drive.google.com/drive/folders/1S_Q-4SYtpAS_vBNwDxRsgaKs0Y6e9pT2"
        },
        "event": "fileCreated",
        "options": {}
      },
      "type": "n8n-nodes-base.googleDriveTrigger",
      "typeVersion": 1,
      "position": [
        -3696,
        -2960
      ],
      "id": "90fe0bb8-f8cb-4a97-92f3-99001fd6d055",
      "name": "New Files",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "29hh4KY4MeILFO9p",
          "name": "Google Drive Account - TheAIAutomators Team"
        }
      }
    },
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "triggerOn": "specificFolder",
        "folderToWatch": {
          "__rl": true,
          "value": "1S_Q-4SYtpAS_vBNwDxRsgaKs0Y6e9pT2",
          "mode": "list",
          "cachedResultName": "RAG files",
          "cachedResultUrl": "https://drive.google.com/drive/folders/1S_Q-4SYtpAS_vBNwDxRsgaKs0Y6e9pT2"
        },
        "event": "fileUpdated",
        "options": {}
      },
      "type": "n8n-nodes-base.googleDriveTrigger",
      "typeVersion": 1,
      "position": [
        -3696,
        -2720
      ],
      "id": "bece75aa-d05a-4a1c-bc26-10e1bfb8d1e5",
      "name": "Updated Files",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "29hh4KY4MeILFO9p",
          "name": "Google Drive Account - TheAIAutomators Team"
        }
      }
    },
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "triggerOn": "specificFolder",
        "folderToWatch": {
          "__rl": true,
          "value": "1_-AetOrJGBQdIfoFZMReL-grPUhMawK3",
          "mode": "list",
          "cachedResultName": "Recycle bin",
          "cachedResultUrl": "https://drive.google.com/drive/folders/1_-AetOrJGBQdIfoFZMReL-grPUhMawK3"
        },
        "event": "fileCreated",
        "options": {}
      },
      "type": "n8n-nodes-base.googleDriveTrigger",
      "typeVersion": 1,
      "position": [
        -3680,
        -4064
      ],
      "id": "9b5b090c-39fd-4291-a16d-c3733bf2a817",
      "name": "Delete Files",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "29hh4KY4MeILFO9p",
          "name": "Google Drive Account - TheAIAutomators Team"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -3456,
        -4064
      ],
      "id": "5e3d1e3a-70f6-49c4-b6da-e3b7f3706732",
      "name": "Loop Over Items1"
    },
    {
      "parameters": {
        "operation": "delete",
        "tableId": "documents_v2",
        "filterType": "string",
        "filterString": "=metadata->>file_id=like.*{{ $('Loop Over Items1').item.json.id }}*"
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -2720,
        -4160
      ],
      "id": "9f2b7b83-94fd-4c9f-a111-9ce36deb6ae9",
      "name": "Delete Previous Vectors1",
      "alwaysOutputData": true,
      "credentials": {
        "supabaseApi": {
          "id": "wwbxqbDc4H2RPQ1Y",
          "name": "Supabase account (AW)"
        }
      }
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        -2496,
        -4160
      ],
      "id": "78f46378-3044-4859-8933-a9e907939ed7",
      "name": "Aggregate1"
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "record_manager_v2",
        "filters": {
          "conditions": [
            {
              "keyName": "doc_id",
              "condition": "eq",
              "keyValue": "={{ $('Loop Over Items1').item.json.id }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -3216,
        -3968
      ],
      "id": "63d77d4c-dd40-45ab-8af5-70d7318d07da",
      "name": "Search Record Manager1",
      "alwaysOutputData": true,
      "credentials": {
        "supabaseApi": {
          "id": "wwbxqbDc4H2RPQ1Y",
          "name": "Supabase account (AW)"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "0a6b6fa5-854b-495a-85c0-7361f3e32f6d",
              "leftValue": "={{ $json.id }}",
              "rightValue": "",
              "operator": {
                "type": "number",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -3024,
        -3968
      ],
      "id": "9f9ae0bb-00d1-44f7-b37c-717a3ecd8eed",
      "name": "If"
    },
    {
      "parameters": {
        "operation": "delete",
        "tableId": "record_manager_v2",
        "filters": {
          "conditions": [
            {
              "keyName": "id",
              "condition": "eq",
              "keyValue": "={{ $('Search Record Manager1').item.json.id }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -2288,
        -4160
      ],
      "id": "7be1101e-24c5-440f-b9dc-47b88cd8c39f",
      "name": "Delete Record from Record Manager",
      "alwaysOutputData": true,
      "credentials": {
        "supabaseApi": {
          "id": "wwbxqbDc4H2RPQ1Y",
          "name": "Supabase account (AW)"
        }
      }
    },
    {
      "parameters": {
        "content": "## RAG File Deletion\nAny files in the Recycling Bin sub-folder will be deleted from the vector store and sub-folder",
        "height": 180,
        "width": 280,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -4064,
        -4080
      ],
      "id": "463ff296-172c-4ed7-ac5f-acee00168c78",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "## RAG File Creation & Update",
        "height": 180,
        "width": 280,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -4064,
        -2960
      ],
      "id": "086addc1-b204-4f8f-89a0-a7397146c840",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.firecrawl.dev/v1/crawl",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{\n  \"url\": \"https://www.fia.com/\",\n  \"limit\": 20,\n  \"webhook\": {\n    \"url\": \"<ENTER WEBHOOK>\",\n    \"events\": [\n      \"page\"\n    ]\n  },\n  \"scrapeOptions\": {\n    \"formats\": [\n      \"markdown\"\n    ]\n  }\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -3456,
        -4496
      ],
      "id": "eb987fb8-ecbf-413c-ad54-044549460da7",
      "name": "Trigger Firecrawl",
      "credentials": {
        "httpHeaderAuth": {
          "id": "23C5j0AXw4jqMvqo",
          "name": "Tims Fal"
        }
      }
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "bb3d078f-65a0-4408-8bd4-d51c585f3b37",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -3696,
        -3200
      ],
      "id": "9ffb5426-ca8c-4a58-929c-8796c54eafa0",
      "name": "Webhook",
      "webhookId": "bb3d078f-65a0-4408-8bd4-d51c585f3b37"
    },
    {
      "parameters": {
        "content": "## Webscraping Creation & Update",
        "height": 180,
        "width": 280,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -4064,
        -3248
      ],
      "id": "d22299fc-03c0-48dc-b05a-4724370b1c8b",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "4f60ed7e-4284-4360-bca2-4513859e7dde",
              "leftValue": "={{ $('Webhook').isExecuted }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -2640,
        -2864
      ],
      "id": "b63ffbd9-6d14-4702-b58f-ee877147d362",
      "name": "If1"
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nfor (const item of $input.all()) {\n  \nitem.json.encoded_message = Buffer.from($('Loop Over Items').first().json.body.data[0].markdown).toString('base64');\n  \n}\n\nreturn $input.all();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2256,
        -3120
      ],
      "id": "5fdbe327-9655-4d8e-b29d-c00cb32eea69",
      "name": "Base64 the Markdown"
    },
    {
      "parameters": {
        "operation": "toBinary",
        "sourceProperty": "encoded_message",
        "options": {}
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        -1936,
        -3120
      ],
      "id": "bb392152-3220-41ae-8be6-6e9ea0ef6c02",
      "name": "Convert to Binary"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "d0f85312-1655-44ed-ab5d-4db71c7b3f03",
              "name": "lightrag_enabled",
              "value": false,
              "type": "boolean"
            },
            {
              "id": "31b25dec-c322-4862-85cd-1746156618fd",
              "name": "multimodal_rag_enabled",
              "value": false,
              "type": "boolean"
            },
            {
              "id": "6e9b9a47-9dc9-4912-8833-c934ec3e5d89",
              "name": "contextual_embedding_enabled",
              "value": true,
              "type": "boolean"
            },
            {
              "id": "39bd7383-0385-459d-85d4-126bc25347ca",
              "name": "doc_id",
              "value": "={{ $json.id || $json.body.data[0].metadata.url }}",
              "type": "string"
            },
            {
              "id": "eabda515-4cc4-49c9-9299-88aa34071946",
              "name": "doc_name",
              "value": "={{ $json.name || $json.body.data[0].metadata.title }}",
              "type": "string"
            },
            {
              "id": "464bcef6-ec45-44fd-aa9e-49bd3ecf6bf6",
              "name": "doc_type",
              "value": "={{ $('Webhook').isExecuted ? \"webpage\" : \"file\" }}",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2976,
        -2864
      ],
      "id": "de561d5a-2265-4bab-a46d-49da2fb01e65",
      "name": "Set Data"
    },
    {
      "parameters": {
        "content": "## Trigger Webscraping",
        "height": 180,
        "width": 280,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -4064,
        -4544
      ],
      "id": "3f9003a3-f9c2-4594-8cdb-09068c252d61",
      "name": "Sticky Note5"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "4db8114c-c34f-4bc6-8c9e-78d7388e9b56",
              "leftValue": "={{ $json.body.data[0].markdown.length }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "gte"
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -3488,
        -3200
      ],
      "id": "e24ef2ee-e248-4389-b499-c10455b56c0c",
      "name": "If2"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "2d3a9569-f099-4136-84d0-6987e691d58b",
              "leftValue": "={{ $('Set Data').item.json.doc_type }}",
              "rightValue": "file",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        3648,
        336
      ],
      "id": "c0376e3d-c7a8-4e2e-b2d9-ace917af737b",
      "name": "If File"
    },
    {
      "parameters": {
        "operation": "move",
        "fileId": {
          "__rl": true,
          "value": "={{ $('Set Data').first().json.doc_id }}",
          "mode": "id"
        },
        "driveId": {
          "__rl": true,
          "value": "My Drive",
          "mode": "list",
          "cachedResultName": "My Drive",
          "cachedResultUrl": "https://drive.google.com/drive/my-drive"
        },
        "folderId": {
          "__rl": true,
          "value": "12aJDffBW8W219B9cv6zF1Nupj-Ieb00J",
          "mode": "list",
          "cachedResultName": "Processed",
          "cachedResultUrl": "https://drive.google.com/drive/folders/12aJDffBW8W219B9cv6zF1Nupj-Ieb00J"
        }
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        3904,
        448
      ],
      "id": "f7004070-760d-47ec-8ba0-cfd4e8b5be7e",
      "name": "Archive File",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "29hh4KY4MeILFO9p",
          "name": "Google Drive Account - TheAIAutomators Team"
        }
      }
    },
    {
      "parameters": {
        "operation": "download",
        "fileId": {
          "__rl": true,
          "value": "={{ $('Loop Over Items').item.json.id }}",
          "mode": "id"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        -352,
        -2896
      ],
      "id": "ba9bb63b-efde-4c63-bde8-921b274ea8b3",
      "name": "Download File1",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "29hh4KY4MeILFO9p",
          "name": "Google Drive Account - TheAIAutomators Team"
        }
      }
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "months",
              "monthsInterval": 10
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -3680,
        -4496
      ],
      "id": "4031182f-20e0-46d6-a763-0fcd5a04803e",
      "name": "Schedule Trigger"
    },
    {
      "parameters": {
        "content": "# State-of-the-Art RAG Agent",
        "height": 600,
        "width": 1388,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -2400,
        752
      ],
      "id": "07cca4ae-4313-4df9-94c5-08b0acc3d8b7",
      "name": "Sticky Note6"
    },
    {
      "parameters": {
        "name": "Query_Vector_Store",
        "description": "Call this to query data from our vector store knowledgebase",
        "workflowId": {
          "__rl": true,
          "value": "A4BVrX5qYlJ7HUMI",
          "mode": "list",
          "cachedResultName": "TheAIAutomators.com - RAG Masterclass - Lesson 9 - STOA - v2.0 Dev 0.3"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "query": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('query', ``, 'string') }}",
            "session_id": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('session_id', ``, 'string') }}",
            "type": "vector"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "query",
              "displayName": "query",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "type",
              "displayName": "type",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "session_id",
              "displayName": "session_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2.1,
      "position": [
        -1504,
        1152
      ],
      "id": "685d978e-b8f1-4ee5-8b2d-a5a2b2607ae6",
      "name": "Query Vector Store"
    },
    {
      "parameters": {
        "workflowInputs": {
          "values": [
            {
              "name": "query"
            },
            {
              "name": "type"
            },
            {
              "name": "session_id"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        -3200,
        1504
      ],
      "id": "44a69636-7511-4d30-9a31-b27ef920192b",
      "name": "When Executed by Another Workflow"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/embeddings",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "input",
              "value": "={{ $('When Executed by Another Workflow').item.json.query }}"
            },
            {
              "name": "model",
              "value": "text-embedding-3-small"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1472,
        1488
      ],
      "id": "18d5fa4f-a8b2-4d8c-8de3-c09850c7044f",
      "name": "Generate Embedding From Query",
      "credentials": {
        "openAiApi": {
          "id": "MM0xMOJkVoJoWOLP",
          "name": "OpenAi account AW"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://YOUR_SUPABASE_URL/functions/v1/hybrid-search",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n        \"query_text\": \"{{ $('When Executed by Another Workflow').item.json.query }}\",\n        \"query_embedding\": [{{ $json.data[0].embedding }}],\n        \"match_count\": 30,\n        \"filter\": {{ JSON.stringify($('Prep Metadata1').item.json.output.filter) }}\n      }",
        "options": {
          "redirect": {
            "redirect": {}
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1232,
        1488
      ],
      "id": "2a998a0e-9c5e-40c9-bdcd-b4becffcb52c",
      "name": "Trigger Hybrid Search",
      "alwaysOutputData": true,
      "credentials": {
        "httpHeaderAuth": {
          "id": "lwhXEwGGqPjAvgcU",
          "name": "Supabase AW Header Auth"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.cohere.com/v2/rerank",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"model\": \"rerank-v3.5\",\n  \"query\": \"{{ $('When Executed by Another Workflow').first().json.query }}\",\n  \"top_n\": 10,\n  \"documents\": {{ JSON.stringify($json.documents) }}\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -464,
        1488
      ],
      "id": "fde9e273-1e9e-4ad4-b13b-bb3a088bde5c",
      "name": "Rerank with Cohere 3.5",
      "credentials": {
        "httpHeaderAuth": {
          "id": "SaJzpmSGdmOFSPDn",
          "name": "Cohere"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// --- This Code Node extracts 'content' from multiple input items ---\n\n// Step 1: Use .map() to iterate over ALL incoming items ($input.all()).\n// For each item, access its 'json' property, and then the 'content' field within that.\nconst contentArray = $input.all().map(item => {\n  // Basic safety check: ensure item.json and item.json.content exist.\n  // Return null or an empty string if not found, otherwise return the content.\n  // Adjust the fallback value (null) if needed.\n  return item.json?.content ?? null;\n});\n\n// Step 2: Filter out any potential null values if an item was missing content (optional)\n// If you are certain all items will have content, you can skip this filter.\nconst validContentArray = contentArray.filter(content => content !== null);\n\n// Step 3: Return the result as a *single* new n8n item.\n// This item contains your final array of strings under the 'documents' key.\nreturn [{\n  json: {\n    // Use validContentArray if you filtered, otherwise use contentArray\n    documents: validContentArray\n    // documents: contentArray // <-- Use this if you didn't filter\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -704,
        1488
      ],
      "id": "2a5f9639-581c-4510-b68a-bce0009e318d",
      "name": "Create Array"
    },
    {
      "parameters": {
        "jsCode": "// --- Code Node to Reorder Items Based on Rerank Results ---\n\n// --- Step 1: Get Data from Input Nodes ---\n// Using the input lines confirmed by the user as correct for their workflow.\n\n// Get the data array to be reordered from the 'Setup Array' node.\n// This could be an array of objects OR an array of strings.\nconst originalDataItems = $('Create Array').first().json.documents;\n\n// Get the rerank results array from the primary input node's first item.\n// (Assumed to be the Cohere Rerank node output).\nconst rerankOrderInfo = $input.first().json.results;\n\n// --- Step 2: Validate Inputs (Basic Checks) ---\n// Validate that we actually got arrays to work with.\nif (!Array.isArray(originalDataItems)) {\n  throw new Error(\"Data retrieved from $('Setup Array').first().json.documents is not an array. Check the 'Setup Array' node output.\");\n}\nif (!Array.isArray(rerankOrderInfo) || rerankOrderInfo.length === 0) {\n  // Allow rerankOrderInfo to be empty if originalDataItems is also empty\n  if (originalDataItems.length !== 0) {\n      throw new Error(\"Could not get valid rerank results from the input node ($input.first()), but original data exists. Check the node providing rerank data.\");\n  }\n  // If both are empty, allow it to proceed and return empty.\n}\n\n\n// --- Step 3: Create the New Array in the Reranked Order ---\n// Handle the case where inputs might be empty.\nlet sortedData = [];\nif (rerankOrderInfo && rerankOrderInfo.length > 0 && originalDataItems && originalDataItems.length > 0) {\n    // Iterate through the rerankOrderInfo array. Each element tells us\n    // the index of the item we want from the originalDataItems array.\n    sortedData = rerankOrderInfo.map(rankInfo => {\n      const originalIndex = rankInfo.index;\n\n      // Check if the index is valid for the originalDataItems array\n      if (originalIndex !== undefined && originalIndex !== null && originalIndex >= 0 && originalIndex < originalDataItems.length) {\n        // Retrieve the corresponding original data item (object or string)\n        return originalDataItems[originalIndex];\n      } else {\n        // Log error for invalid index found in rerank results\n        console.error(`Error: Rerank result index ${originalIndex} is invalid or out of bounds for original data (length ${originalDataItems.length}). Skipping this index.`);\n        return null; // Return null for invalid indices\n      }\n    }).filter(item => item !== null); // Remove any nulls caused by invalid indices\n} else {\n    // If inputs were empty or invalid, ensure sortedData is an empty array\n    sortedData = [];\n    console.log(\"Input data (original or rerank info) is empty or invalid, resulting in empty sorted output.\");\n}\n\n\n// --- Step 4: Return the Sorted Data as a Single Item Containing the Array ---\n// This format returns ONE n8n item. The item's json property contains\n// an object with a key 'sortedDocuments' which holds the array.\n// This structure works correctly whether sortedData contains objects or strings.\nreturn [{\n  json: {\n    sortedDocuments: sortedData\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -256,
        1488
      ],
      "id": "38e5592c-db1b-41d4-b0d7-997935c092e5",
      "name": "Return Reordered Items1"
    },
    {
      "parameters": {
        "content": "## Hybrid Search",
        "height": 520,
        "width": 520,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1568,
        1376
      ],
      "id": "edfe2ab3-51d6-4602-a0e9-52822ddc577e",
      "name": "Sticky Note11"
    },
    {
      "parameters": {
        "content": "## Reranking",
        "height": 520,
        "width": 980,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1024,
        1376
      ],
      "id": "44988f36-abc7-4f44-90f2-6fd67cd9ceea",
      "name": "Sticky Note12"
    },
    {
      "parameters": {
        "jsCode": "const text = $input.first().json.content;\nconst chunkSize = 1000;\nconst chunkOverlap = 0;\nconst overlapBoundary = 'word'; // 'word' or 'sentence'\n\n// Prioritize splitting by Markdown headings, then paragraphs, then lines.\nconst separators = [\n    \"\\n# \", // H1\n    \"\\n## \", // H2\n    \"\\n### \", // H3\n    \"\\n#### \", // H4\n    \"\\n##### \", // H5\n    \"\\n###### \", // H6\n    \"\\n\\n\", // Paragraph\n    \"\\n\",   // Line\n    \" \",    // Word\n    \"\"      // Character\n];\n\n/**\n * Adjusts the overlap text so it starts at a word or sentence boundary.\n *\n * @param {string} prevChunk - The previous chunk of text.\n * @param {number} overlap - The desired minimum number of characters to overlap.\n * @param {string} type - 'word' or 'sentence'.\n * @returns {string} The adjusted overlap text.\n */\nfunction getOverlapBoundary(prevChunk, overlap, type) {\n    let candidateStart = prevChunk.length - overlap;\n    if (candidateStart < 0) candidateStart = 0;\n\n    if (type === 'sentence') {\n        const substring = prevChunk.slice(candidateStart);\n        const sentenceRegex = /[.!?]\\s*/g;\n        let lastIndex = -1;\n        let match;\n        \n        while ((match = sentenceRegex.exec(substring)) !== null) {\n            lastIndex = match.index + match[0].length;\n        }\n\n        if (lastIndex !== -1 && lastIndex < substring.length) {\n            return prevChunk.slice(candidateStart + lastIndex);\n        }\n    }\n\n    // Fallback for 'word' boundary or if no sentence terminator is found.\n    while (candidateStart > 0 && !/\\s/.test(prevChunk[candidateStart - 1])) {\n        candidateStart--;\n    }\n    return prevChunk.slice(candidateStart);\n}\n\n/**\n * Recursively splits the text into chunks of a maximum length, applying overlap.\n * It prioritizes splitting based on the order of separators provided.\n *\n * @param {string} text - The text to split.\n * @param {number} chunkSize - The maximum length of each chunk.\n * @param {number} overlap - The number of characters to overlap between chunks.\n * @param {string[]} seps - Array of separators to use for splitting.\n * @returns {string[]} An array of text chunks.\n */\nfunction recursiveSplit(text, chunkSize, overlap, seps) {\n    const finalChunks = [];\n    let currentChunk = \"\";\n\n    // Start with the highest-priority separator\n    const separator = seps[0];\n    const remainingSeps = seps.slice(1);\n\n    // Split by the current separator\n    const splits = text.split(separator);\n\n    for (let i = 0; i < splits.length; i++) {\n        const part = splits[i];\n        \n        // Add the separator back to the part (except for the first part)\n        const partWithSeparator = (i > 0) ? separator + part : part;\n\n        // If the part fits in the current chunk, add it\n        if (currentChunk.length + partWithSeparator.length <= chunkSize) {\n            currentChunk += partWithSeparator;\n        } else {\n            // If the current chunk has content, push it to the results\n            if (currentChunk.length > 0) {\n                finalChunks.push(currentChunk);\n            }\n\n            // If the new part itself is too large, split it further recursively\n            if (partWithSeparator.length > chunkSize) {\n                // Remove the separator for the recursive call if it was added\n                const partToSplit = (i > 0) ? part : partWithSeparator;\n                const subChunks = recursiveSplit(partToSplit, chunkSize, overlap, remainingSeps);\n                finalChunks.push(...subChunks);\n                currentChunk = \"\"; // Reset current chunk\n            } else {\n                currentChunk = partWithSeparator;\n            }\n        }\n    }\n    \n    // Add the last remaining chunk\n    if (currentChunk.length > 0) {\n        finalChunks.push(currentChunk);\n    }\n    \n    // If we have successfully split the text, apply overlap and return\n    if (finalChunks.length > 1) {\n        const overlappedChunks = finalChunks.map((chunk, i) => {\n            if (i > 0 && overlap > 0) {\n                const prevChunk = finalChunks[i - 1];\n                const overlapText = getOverlapBoundary(prevChunk, overlap, overlapBoundary);\n                return overlapText + chunk;\n            }\n            return chunk;\n        });\n        return overlappedChunks;\n    }\n\n    // If no splitting occurred with the current separator, try the next one\n    if (remainingSeps.length > 0) {\n        return recursiveSplit(text, chunkSize, overlap, remainingSeps);\n    }\n\n    // If no separators can split the text (e.g., text is smaller than chunkSize), return as a single chunk\n    return [text];\n}\n\nreturn recursiveSplit(text, chunkSize, chunkOverlap, separators)\n  .map(chunk => ({ json: { chunk } }));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        688,
        -288
      ],
      "id": "b19ee977-dca3-4fb1-9d50-349bb407ae2c",
      "name": "Chunking"
    },
    {
      "parameters": {
        "batchSize": 50,
        "options": {
          "reset": "={{ $node['Loop over Chunks'].context.done }}"
        }
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        1200,
        -368
      ],
      "id": "684fa602-9002-4fd9-8937-1d8a614f1179",
      "name": "Loop over Chunks"
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4.1-nano",
          "mode": "list",
          "cachedResultName": "GPT-4.1-NANO"
        },
        "messages": {
          "values": [
            {
              "content": "=<document> \n{{ $('Set up Text for Embedding').item.json.content }} \n</document> \nHere is the chunk we want to situate within the whole document \n<chunk> \n{{ $json.chunk }}\n</chunk> \nPlease give a short succinct context to situate this chunk within the overall document for the purposes of improving search retrieval of the chunk. Answer only with the succinct context and nothing else. "
            }
          ]
        },
        "simplify": false,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        2048,
        -496
      ],
      "id": "dde7f1ba-1063-4487-9788-a718790508cc",
      "name": "Generate Chunk Description",
      "retryOnFail": true,
      "waitBetweenTries": 5000,
      "maxTries": 5,
      "credentials": {
        "openAiApi": {
          "id": "MM0xMOJkVoJoWOLP",
          "name": "OpenAi account AW"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "2571a1ec-f6fc-46d6-9361-fc121eacbc99",
              "name": "content",
              "value": "={{ $json.chunk }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2848,
        -400
      ],
      "id": "7962f1b6-9765-4bc9-a931-757c63347bd1",
      "name": "Setup Chunk for Embedding"
    },
    {
      "parameters": {
        "content": "[![The AI Automators](https://www.theaiautomators.com/wp-content/uploads/2025/03/gray-logo.png)](https://www.theaiautomators.com/)",
        "height": 140,
        "width": 300,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -4064,
        -4816
      ],
      "id": "ebb7c0af-00fd-4b98-b45b-af01ed87885c",
      "name": "Sticky Note8"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "71326cd6-1316-4b5e-bf34-0d0b3c086005",
              "leftValue": "={{ $('Trigger Hybrid Search').item.json.keys().length}}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -976,
        1488
      ],
      "id": "1873aab1-3a52-48f0-9446-56b21da94940",
      "name": "If3",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "jsCode": "return [{\n  message: \"no documents found\" \n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -704,
        1712
      ],
      "id": "cb97a355-ddf1-42c8-908f-c67df7a87a48",
      "name": "Code"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "dcd400bc-0b91-4c30-81bd-da402e4a2730",
                    "leftValue": "={{ $json.hash }}",
                    "rightValue": "={{ $('Generate Hash').item.json.hash }}",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json }}",
                    "rightValue": "",
                    "operator": {
                      "type": "object",
                      "operation": "empty",
                      "singleValue": true
                    },
                    "id": "ad01f150-f021-454c-aa13-eea5b26c2cba"
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "ca0c7ef8-09f9-4424-947b-8469b1ed8cac",
                    "leftValue": "={{ $json.hash }}",
                    "rightValue": "={{ $('Generate Hash').item.json.hash }}",
                    "operator": {
                      "type": "string",
                      "operation": "notEquals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -2800,
        -176
      ],
      "id": "cd11eb59-7e70-4c29-81fa-cd706f21bcd4",
      "name": "Switch"
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        2736,
        336
      ],
      "id": "35a58269-ccb4-4599-895e-88d822a232b5",
      "name": "Aggregate2"
    },
    {
      "parameters": {
        "content": "## Knowledge Graph Updates",
        "height": 392,
        "width": 1412,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1568,
        -992
      ],
      "id": "adb0a991-810d-4538-a040-088e4c5c9ae8",
      "name": "Sticky Note14"
    },
    {
      "parameters": {
        "content": "## Contextual Vector Embeddings",
        "height": 804,
        "width": 2260,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        64,
        -528
      ],
      "id": "8dcdb40f-a7d9-4f02-83b0-b6b452cfcd25",
      "name": "Sticky Note15"
    },
    {
      "parameters": {
        "content": "## File Format Router & Extraction",
        "height": 1880,
        "width": 4320,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1664,
        -3568
      ],
      "id": "e70bab37-07bd-4ea4-882a-8190acf0d716",
      "name": "Sticky Note9"
    },
    {
      "parameters": {
        "name": "Query_Knowledge_Graph",
        "description": "Call this to query data from our knowledge graph",
        "workflowId": {
          "__rl": true,
          "value": "A4BVrX5qYlJ7HUMI",
          "mode": "list",
          "cachedResultName": "TheAIAutomators.com - RAG Masterclass - Lesson 9 - STOA - v2.0 Dev 0.3"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "query": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('query', ``, 'string') }}",
            "session_id": "=",
            "type": "graph"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "query",
              "displayName": "query",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "type",
              "displayName": "type",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "session_id",
              "displayName": "session_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2.1,
      "position": [
        -1328,
        1152
      ],
      "id": "aafeda90-c50c-412b-8f52-8beb5cd7e685",
      "name": "Query Knowledge Graph",
      "retryOnFail": true,
      "maxTries": 5,
      "waitBetweenTries": 5000
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.type }}",
                    "rightValue": "vector",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "322d7a20-e584-4a2c-ad39-987298dabdf1"
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "4c020ce0-c212-4e62-9c42-863f0358d065",
                    "leftValue": "={{ $json.type }}",
                    "rightValue": "graph",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -3040,
        1504
      ],
      "id": "cf89c4af-6797-43d1-b322-8b05ad6483bc",
      "name": "Switch2"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://lightrag:8020/query",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"query\": \"{{ $('When Executed by Another Workflow').item.json.query }}\",\n  \"mode\": \"hybrid\",\n  \"only_need_context\": true,\n  \"only_need_prompt\": false,\n  \"response_type\": \"multiple paragraphs\",\n  \"top_k\": 20,\n  \"chunk_top_k\": 1,\n  \"max_entity_tokens\": 10000,\n  \"max_relation_tokens\": 10000,\n  \"max_total_tokens\": 32000,\n  \"enable_rerank\": false\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -2224,
        2032
      ],
      "id": "bbac43bd-65c1-4948-a996-3dfde36c1ecc",
      "name": "Query Graph",
      "credentials": {
        "httpHeaderAuth": {
          "id": "ASaNYCEZJOKUmtf9",
          "name": "LightRAG on Render 2"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and extract everything before \"-----Document Chunks(DC)-----\"\nfor (const item of $input.all()) {\n\n  const intro = \"The following entities and relationships were retrived.\\n\\n\"\n  const outro = \"-----How to use this data-----\\n\\nWhen considering relationships with timestamps:\\n\\nEach relationship has a \\\"created_at\\\" timestamp indicating when we acquired this knowledge. When encountering conflicting relationships, consider both the semantic content and the timestamp. Don't automatically prefer the most recently created relationships - use judgment based on the context. For time-specific queries, prioritize temporal information in the content before considering creation timestamps\"\n  \n  // Get the input string - adjust this based on where your string is located\n  const inputString = item.json.response; // Change 'response' to your actual field name\n  \n  // Define the substring to search for\n  const separator = \"-----Document Chunks(DC)-----\";\n  \n  // Find the position of the separator\n  const separatorIndex = inputString.indexOf(separator);\n  \n  let extractedContent = \"\";\n  \n  if (separatorIndex !== -1) {\n    // Extract everything before the separator\n    extractedContent = inputString.substring(0, separatorIndex);\n  } else {\n    // If separator not found, return the entire string\n    extractedContent = inputString;\n  }\n  \n  // Add the extracted content to the item\n  item.json.response = intro + extractedContent + outro;\n\n}\n\nreturn $input.all();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1984,
        2032
      ],
      "id": "bc37594d-aa7d-43bf-9750-d98426a42e59",
      "name": "Tidy up response"
    },
    {
      "parameters": {
        "content": "## Graph Search",
        "height": 300,
        "width": 800,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -2384,
        1904
      ],
      "id": "dd25f6cd-dc70-4690-9830-bd790bfd0f36",
      "name": "Sticky Note13"
    },
    {
      "parameters": {
        "content": "## Advanced Metadata Filtering",
        "height": 520,
        "width": 800,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -2384,
        1376
      ],
      "id": "336e389f-2477-4f5e-aa98-b8948ac3b8f1",
      "name": "Sticky Note16"
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"title\": \"Generic Object with String or Number Values\",\n  \"type\": \"object\",\n  \"additionalProperties\": {\n    \"type\": [\"string\", \"number\"]\n  }\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        -96,
        0
      ],
      "id": "0200a735-ab4c-4ed6-9668-8d6d05e63940",
      "name": "Structured Output Parser2"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1",
          "mode": "list",
          "cachedResultName": "gpt-4.1"
        },
        "options": {
          "responseFormat": "json_object"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -288,
        0
      ],
      "id": "a4bf4d8b-e14e-4832-9e1d-0e2923e61f2d",
      "name": "OpenAI Chat Model3",
      "credentials": {
        "openAiApi": {
          "id": "MM0xMOJkVoJoWOLP",
          "name": "OpenAi account AW"
        }
      }
    },
    {
      "parameters": {
        "content": "## Document & Metadata Enrichment",
        "height": 820,
        "width": 1616
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1584,
        -544
      ],
      "id": "7a2f8012-789d-4e51-8e09-7ac5f4f2863c",
      "name": "Sticky Note7"
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "metadata_fields"
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -656,
        -224
      ],
      "id": "63ec36e9-bca5-44b7-a29b-a2aa74afd244",
      "name": "Fetch Metadata Fields",
      "credentials": {
        "supabaseApi": {
          "id": "wwbxqbDc4H2RPQ1Y",
          "name": "Supabase account (AW)"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Get input items\nconst items = $input.all();\n\n// Initialize output string and list of fields\nlet output = '';\nlet fieldList = '';\n\n// Loop through each input item\nfor (const item of items) {\n  const data = item.json;\n\n  const key = data.metadata_name;\n  const values = data.allowed_values;\n\n  output += `## ${key}\\n`;\n  output += `The filter key ${key} can have the following possible values\\n\\n`;\n  output += `${values.trim()}\\n\\n`;\n\n  fieldList += `\"${key}\":\"<ADD>\",\\n`;\n}\n\n// Remove trailing comma and newline from fieldList\nfieldList = fieldList.trim().replace(/,\\s*$/, '');\n\n// Take the first item and modify it with aggregated data\nconst firstItem = items[0];\nfirstItem.json.filterPromptInstructions = output.trim();\nfirstItem.json.list_of_fields = fieldList;\n\n// Return only the first item (now containing aggregated data)\nreturn [firstItem];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -448,
        -224
      ],
      "id": "fcb922ab-50cb-48ea-92be-6b416d4a6235",
      "name": "Prep"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=# File Name\n{{ $('Set Data').item.json.doc_name }}\n\n##################\n\n# File Contents\n{{ \n$('Set Text (Merged)').first().json.text.split(/\\s+/).length > 500 \n    ? $('Set Text (Merged)').first().json.text.split(/\\s+/).slice(0, 500).join(' ') + '...' \n    : $('Set Text (Merged)').first().json.text \n}}",
        "hasOutputParser": true,
        "messages": {
          "messageValues": [
            {
              "message": "=Based on the provided file name and file contents, extract out a 1 sentence description of what the document is about and classify the document according to the below fields.\n\nOnly output JSON in the following format\n\n{\n\"document_summary\":\"<ADD>\",\n{{ $json.list_of_fields }}\n}\n\nIf you are unsure of any of these, just output N/A in the field.\n\n{{ $json.filterPromptInstructions }}"
            }
          ]
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.6,
      "position": [
        -240,
        -224
      ],
      "id": "c2372aec-5ada-4006-9ce2-da1cbcf4660a",
      "name": "Enrich",
      "retryOnFail": true,
      "maxTries": 5
    },
    {
      "parameters": {
        "options": {
          "groupMessages": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.memoryManager",
      "typeVersion": 1.1,
      "position": [
        -2688,
        1488
      ],
      "id": "3da6da2c-e00e-4c47-9f89-6761171f23cd",
      "name": "Chat Memory Manager",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1",
          "mode": "list",
          "cachedResultName": "gpt-4.1"
        },
        "options": {
          "temperature": 0.4
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -1872,
        1696
      ],
      "id": "b02f0a06-eec9-4061-a4f2-96732b6b6ea4",
      "name": "OpenAI Chat Model4",
      "credentials": {
        "openAiApi": {
          "id": "MM0xMOJkVoJoWOLP",
          "name": "OpenAi account AW"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=# User Query\n{{ $('When Executed by Another Workflow').first().json.query }}\n\n# Conversation History (if any)\n{{ JSON.stringify($('Chat Memory Manager').first().json) }}",
        "hasOutputParser": true,
        "messages": {
          "messageValues": [
            {
              "message": "=# Task\n\nYour task is to consider the following user query and then consider the following metadata keys with example values that we have that we can limit our result set from.\n\n# Metadata Filters and Possible Values\n\n{{ $json.filterPromptInstructions }}\n\n# Metadata Operators\n\nThe following operators are allowed:\n\n>\n<\n=\n!=\n>=\n<=\nIN\nNOT IN\n\nIF IN or NOT IN are provided, then an array of values must be provided.\n\nNow output a filter array with relevant filters with the following example format. The below filter_categories are just for exampe purposes. Use the \"Metadata Filters and Possible Values\" list above for the list of allowed filters.\n\n[\n    \"filter\": {\n      \"$and\": [\n        {\n          \"category\": {\n            \"operator\": \"IN\",\n            \"value\": [\n              \"F1\",\n              \"Rally\"\n            ]\n          }\n        },\n        {\n          \"year\": {\n            \"operator\": \">\",\n            \"value\": 2024\n          }\n        }\n      ]\n    }\n]\n\nIf the query does not have relevant metadatafilters, then do not output any ... for example\n\n{\n  \"filter\": {}\n}\n\nIf there is only 1 relevant metadafilter, then just output that ... for example\n\n[\n    \"filter\": {\n      \"$and\": [\n        {\n          \"motorsport_category\": {\n            \"operator\": \"IN\",\n            \"value\": [\n              \"F1\",\n              \"Rally\"\n            ]\n          }\n        }\n      ]\n    }\n]\n\nOnly output in JSON"
            }
          ]
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.6,
      "position": [
        -1872,
        1488
      ],
      "id": "718508a5-8f84-4477-abd5-4ca36f654f8b",
      "name": "Prep Metadata1",
      "retryOnFail": true,
      "maxTries": 5
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"title\": \"FlexibleFilterObject\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"filter\": {\n      \"type\": \"object\",\n      \"oneOf\": [\n        {\n          \"required\": [\"$and\"],\n          \"properties\": {\n            \"$and\": {\n              \"type\": \"array\",\n              \"items\": { \"$ref\": \"#/definitions/condition\" }\n            }\n          },\n          \"additionalProperties\": false\n        },\n        {\n          \"required\": [\"$or\"],\n          \"properties\": {\n            \"$or\": {\n              \"type\": \"array\",\n              \"items\": { \"$ref\": \"#/definitions/condition\" }\n            }\n          },\n          \"additionalProperties\": false\n        },\n        {\n          \"properties\": {},\n          \"additionalProperties\": false\n        }\n      ]\n    }\n  },\n  \"required\": [\"filter\"],\n  \"definitions\": {\n    \"condition\": {\n      \"oneOf\": [\n        {\n          \"type\": \"object\",\n          \"required\": [\"field\", \"operator\", \"value\"],\n          \"properties\": {\n            \"field\": { \"type\": \"string\" },\n            \"operator\": {\n              \"type\": \"string\",\n              \"enum\": [\"=\", \"!=\", \">\", \"<\", \">=\", \"<=\", \"IN\", \"NOT IN\"]\n            },\n            \"value\": {\n              \"oneOf\": [\n                { \"type\": \"string\" },\n                { \"type\": \"number\" },\n                {\n                  \"type\": \"array\",\n                  \"items\": { \"type\": [\"string\", \"number\"] }\n                }\n              ]\n            }\n          },\n          \"additionalProperties\": false\n        },\n        {\n          \"type\": \"object\",\n          \"minProperties\": 1,\n          \"maxProperties\": 1,\n          \"patternProperties\": {\n            \"^.+$\": {\n              \"type\": \"object\",\n              \"required\": [\"operator\", \"value\"],\n              \"properties\": {\n                \"operator\": {\n                  \"type\": \"string\",\n                  \"enum\": [\"=\", \"!=\", \">\", \"<\", \">=\", \"<=\", \"IN\", \"NOT IN\"]\n                },\n                \"value\": {\n                  \"oneOf\": [\n                    { \"type\": \"string\" },\n                    { \"type\": \"number\" },\n                    {\n                      \"type\": \"array\",\n                      \"items\": { \"type\": [\"string\", \"number\"] }\n                    }\n                  ]\n                }\n              },\n              \"additionalProperties\": false\n            }\n          },\n          \"additionalProperties\": false\n        }\n      ]\n    }\n  }\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        -1712,
        1696
      ],
      "id": "5ae5e1a4-96de-4cac-ae17-08b96d78c6a3",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "content": "# Retrieval Sub-Workflow",
        "height": 520,
        "width": 840,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -3248,
        1376
      ],
      "id": "1dc7bc02-db9f-4250-babf-a8f52407244f",
      "name": "Sticky Note17"
    },
    {
      "parameters": {
        "content": "[![The AI Automators](https://www.theaiautomators.com/wp-content/uploads/2025/03/gray-logo.png)](https://www.theaiautomators.com/)",
        "height": 220,
        "width": 580,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -3104,
        864
      ],
      "id": "91c8aa41-9f62-4938-b07f-5bf74796d565",
      "name": "Sticky Note10"
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "metadata_fields"
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -2304,
        1488
      ],
      "id": "5b1eab27-04c2-41d6-bb86-4c5b2a811a76",
      "name": "Fetch Metadata Fields1",
      "credentials": {
        "supabaseApi": {
          "id": "wwbxqbDc4H2RPQ1Y",
          "name": "Supabase account (AW)"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Get input items\nconst items = $input.all();\n\n// Initialize output string\nlet output = '';\n\n// Loop through each input item\nfor (const item of items) {\n  const data = item.json;\n\n  const key = data.metadata_name;\n  const values = data.allowed_values;\n\n  output += `## ${key}\\n`;\n  output += `The filter key ${key} can have the following possible values\\n\\n`;\n  output += `${values.trim()}\\n\\n`;\n}\n\n// Take the first item and modify it with aggregated data\nconst firstItem = items[0];\nfirstItem.json.filterPromptInstructions = output.trim();\n\n// Return only the first item (now containing aggregated data)\nreturn [firstItem];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2096,
        1488
      ],
      "id": "6c8255f5-77f5-441d-a2d6-5e30563fb149",
      "name": "Prep1"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('When chat message received').item.json.chatInput }}",
        "options": {
          "systemMessage": "=---Role---\n\nYou are a helpful assistant responding to a user's query based on the information provided by the Vector and Graph tools and structured datasets.\n\n---Goal---\n\nYou are tasked with creating and executing a retrieval strategy to best answer the users question.\n\nThe output should be a well-reserached response to the users query based on the output from these tools and to follow the Response Rules set about below.\n\nYou must consider both the conversation history and the current query.\n\nIf the question involves tabular data—such as calculating sums, averages, or finding maximum values—the vector store and graph tools may be unreliable. In that case, start by reviewing the available datasets, identify the ones most likely to contain the answer, and then construct a SQL query to analyze them.\n\nYour goal is to provide an accurate answer based on the output from these tools ONLY.\n\n---Response Rules---\n\n- Ideal target format and length: Multiple Paragraphs\n- Use markdown formatting with appropriate section headings\n- Please respond in the same language as the user's question.\n- If there are images provided from the retrieved information, you should return this in markdown format.\n- Ensure the response maintains continuity with the conversation history.\n- List up to 5 most important reference sources at the end under \"References\" section. Clearly indicating whether each source is from, such as Vector Store (VS)\n- If you cannot answer the question using the provided information or if no information is returned from the tools, say \"Sorry I don't know\".\n- Do not make anything up. \n- Do not include information not provided by the Knowledge Bases.\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        -1792,
        896
      ],
      "id": "91392218-a050-4554-8e46-d5fc9d5cf749",
      "name": "Agentic RAG",
      "retryOnFail": true,
      "maxTries": 5
    },
    {
      "parameters": {
        "content": "",
        "height": 600,
        "width": 840,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -3264,
        752
      ],
      "id": "b823ea06-1ad0-4896-8e10-d196aaad6122",
      "name": "Sticky Note18"
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        -2000,
        1152
      ],
      "id": "855aff2f-f0a4-45e6-87ed-72429bc16c27",
      "name": "Supabase Short-Term Memory",
      "credentials": {
        "postgres": {
          "id": "7aOzWLaZcz9dgeSv",
          "name": "Postgres account (Supabase AW)"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('When Executed by Another Workflow').item.json.session_id }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        -2576,
        1664
      ],
      "id": "c1ce11c0-e79e-4a06-bda8-6531613ab205",
      "name": "Supabase Short-Term Memory1",
      "credentials": {
        "postgres": {
          "id": "7aOzWLaZcz9dgeSv",
          "name": "Postgres account (Supabase AW)"
        }
      }
    },
    {
      "parameters": {
        "content": "## TODO: Enable/Disable services here",
        "height": 280,
        "width": 280
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -3056,
        -2976
      ],
      "id": "85ccec12-cc95-4c8c-8ed5-985861b07e3e",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "content": "### TODO: Add LightRAG Server URL",
        "height": 220,
        "width": 280
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -2304,
        1968
      ],
      "id": "14ed6184-1649-40c0-a467-6998c1537cec",
      "name": "Sticky Note19"
    },
    {
      "parameters": {
        "content": "## v2.0 (2025-08-19)\nSetup instructions here:\nhttps://community.theaiautomators.com/c/automation-templates/state-of-the-art-n8n-rag-agent",
        "height": 180,
        "width": 580,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -3104,
        1136
      ],
      "id": "93b5f3f2-0fa7-4845-9a55-2f8f1b481845",
      "name": "Sticky Note21"
    },
    {
      "parameters": {
        "operation": "deleteFile",
        "fileId": {
          "__rl": true,
          "value": "={{ $('Loop Over Items1').item.json.id }}",
          "mode": "id"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        -1680,
        -3952
      ],
      "id": "750b1437-765e-4947-bb92-f6f291bfb9a0",
      "name": "Delete a file",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "29hh4KY4MeILFO9p",
          "name": "Google Drive Account - TheAIAutomators Team"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('Set Data').item.json.lightrag_enabled }}",
                    "rightValue": "",
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    },
                    "id": "ff677730-3b6a-41af-b46e-69c0610d9ea2"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "If LightRAG enabled"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "ba8b00e1-09f7-4729-a3f2-1a0526e1b9f8",
                    "leftValue": "1",
                    "rightValue": "1",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Always execute"
            }
          ]
        },
        "options": {
          "allMatchingOutputs": true
        }
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -1008,
        -336
      ],
      "id": "ca9128b2-3646-4db1-be3f-72e35b8edd35",
      "name": "Is LightRAG enabled?"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('Set Data').item.json.lightrag_enabled }}",
                    "rightValue": "",
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    },
                    "id": "ff677730-3b6a-41af-b46e-69c0610d9ea2"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "If LightRAG enabled"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "918f53c3-a48f-4cf4-a005-2c3c6e43da39",
                    "leftValue": "1",
                    "rightValue": "1",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Always execute"
            }
          ]
        },
        "options": {
          "allMatchingOutputs": true
        }
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -2080,
        -784
      ],
      "id": "7f2f5f2d-7396-44ef-8bd5-98df1abda26c",
      "name": "Is LightRAG enabled?1"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "4a63774b-98fb-4f42-af92-5bf4ff6017ca",
              "leftValue": "={{ $('Set Data').item.json.multimodal_rag_enabled }}",
              "rightValue": 10,
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -272,
        -3168
      ],
      "id": "1867cf5e-bdd4-4303-9772-31d9b55be4af",
      "name": "Is Multimodal enabled?"
    },
    {
      "parameters": {
        "operation": "get",
        "documentURL": "={{ $json.id }}"
      },
      "type": "n8n-nodes-base.googleDocs",
      "typeVersion": 2,
      "position": [
        320,
        -3440
      ],
      "id": "5586c99d-fe03-49e8-a508-3a7c478ea1fc",
      "name": "Get a document",
      "credentials": {
        "googleDocsOAuth2Api": {
          "id": "bqI58vKXpk38ykBy",
          "name": "Google Docs account LLTeam"
        }
      }
    },
    {
      "parameters": {
        "content": "Note: Firecrawl.dev returns markdown by default. If your scraping service returns HTML then add a HTML to Markdown node here",
        "height": 140
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -128,
        -2560
      ],
      "id": "d71b2cdb-300f-421f-ab3d-705e3b93cdb7",
      "name": "Sticky Note22"
    },
    {
      "parameters": {
        "operation": "xlsx",
        "options": {}
      },
      "id": "53aef972-e12f-49f5-95e3-127d4fc4956a",
      "name": "Extract from Excel",
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -240,
        -2128
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -240,
        -2336
      ],
      "id": "a4492a33-51f6-4c68-adcc-3dd32194b558",
      "name": "Extract from CSV"
    },
    {
      "parameters": {
        "fieldsToSummarize": {
          "values": [
            {
              "aggregation": "concatenate",
              "field": "data"
            }
          ]
        },
        "options": {}
      },
      "id": "a4db1cec-a21e-458b-b965-f47c996579fe",
      "name": "Summarize",
      "type": "n8n-nodes-base.summarize",
      "typeVersion": 1,
      "position": [
        1296,
        -2208
      ]
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "={{ $('Loop Over Items').item.json.id }}",
          "mode": "id"
        },
        "sheetName": {
          "__rl": true,
          "value": "={{ $json.sheets[0].properties.sheetId }}",
          "mode": "id"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        -240,
        -1920
      ],
      "id": "175801a7-f33d-4558-9ea4-8a755c911e2e",
      "name": "Get row(s) in sheet",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "Ov0u9BUnvPNePMaD",
          "name": "Google Sheets account LogicLabsTeam"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "98ed8f1b-f706-4829-8010-cf33b8eaf1d2",
              "name": "array_keys",
              "value": "={{ $json.data.first().keys() }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1296,
        -2400
      ],
      "id": "da6b8016-9546-4396-b06d-0955c2f4766e",
      "name": "Array keys"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        1904,
        -2304
      ],
      "id": "768c739c-97af-457a-a0f0-948e46fa16b8",
      "name": "Merge"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "a27d8259-8ed2-4638-8716-b60119b8f90c",
              "name": "text",
              "value": "={{ $json.concatenated_data }}",
              "type": "string"
            },
            {
              "id": "ccab898b-7018-41cf-9418-ccfca0509259",
              "name": "array_keys",
              "value": "={{ $json.array_keys }}",
              "type": "string"
            },
            {
              "id": "6b696d19-a500-46e4-92a6-4b0148ddb153",
              "name": "data_type",
              "value": "tabular",
              "type": "string"
            },
            {
              "id": "c91004d6-3bcc-4542-ad90-8eea6bd78707",
              "name": "data_rows",
              "value": "={{ $('Aggregate3').item.json.data }}",
              "type": "array"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2384,
        -2304
      ],
      "id": "6f08e664-800a-44aa-9e5a-2607acdf4351",
      "name": "Set Text for Tabular Data"
    },
    {
      "parameters": {
        "url": "=https://sheets.googleapis.com/v4/spreadsheets/{{ $('Loop Over Items').item.json.id }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "googleSheetsOAuth2Api",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -672,
        -2208
      ],
      "id": "1b4e4cbc-4ba6-4d8d-991e-576c319c50c7",
      "name": "Get google sheet info",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "Ov0u9BUnvPNePMaD",
          "name": "Google Sheets account LogicLabsTeam"
        }
      }
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "include": "allFieldsExcept",
        "fieldsToExclude": "row_number",
        "options": {}
      },
      "id": "f2a75aae-9e4a-4163-8993-6fc281be24a8",
      "name": "Aggregate3",
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        1024,
        -2288
      ]
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        3008,
        -1728
      ],
      "id": "2312f731-ef02-4aeb-98f4-55126d8d7b82",
      "name": "No Operation, do nothing2"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.mimeType }}",
                    "rightValue": "application/vnd.google-apps.document",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "9e010d7f-0552-4a06-9566-e3031ffae240"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Google Docs"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "ddac5320-959a-4634-9000-c9cdc397d2e4",
                    "leftValue": "={{ $json.mimeType }}",
                    "rightValue": "application/pdf",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "PDF"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "b94191c9-1f29-4558-a4ac-3a74e9f5d88f",
                    "leftValue": "={{ $json.mimeType }}",
                    "rightValue": "text/html",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "HTML"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "656e77d3-0b79-4f95-a950-93f24506f8ce",
                    "leftValue": "={{ $json.mimeType }}",
                    "rightValue": "text/csv",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "CSV"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "84f9cf5d-6348-43fc-b5cd-2833b4c9dd5f",
                    "leftValue": "={{ $json.mimeType }}",
                    "rightValue": "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Excel"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "0ceeb2c2-9931-479c-b105-36f9ef0381b1",
                    "leftValue": "={{ $json.mimeType }}",
                    "rightValue": "application/vnd.google-apps.spreadsheet",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Google Sheets"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -1120,
        -3056
      ],
      "id": "0e0fc7f4-278e-4e3b-ae63-cfe9a8e7217b",
      "name": "Switch1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "65a2b6a1-2817-4d30-a0a3-ba1baeffe286",
              "name": "text",
              "value": "={{ $json.text }}",
              "type": "string"
            },
            {
              "id": "8ce1313f-d7ec-4336-88e7-1b861379733d",
              "name": "data_type",
              "value": "={{ $json.data_type }}",
              "type": "string"
            },
            {
              "id": "d1c52fad-f1af-46de-aa21-387bcb350309",
              "name": "array_keys",
              "value": "={{ $json.array_keys || null }}",
              "type": "string"
            },
            {
              "id": "68e7090d-0fba-4d63-a3d7-d3a10b17905c",
              "name": "data_rows",
              "value": "={{ $json.data_rows || null }}",
              "type": "array"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        3136,
        -2016
      ],
      "id": "a5b18028-9f27-4e68-b19a-e5cf819ccfde",
      "name": "Set Text (Merged)"
    },
    {
      "parameters": {
        "content": "## Tabular Data",
        "height": 400,
        "width": 1408,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1568,
        -1408
      ],
      "id": "7ea12c33-90dc-4dce-9bbf-4ed1dd28184a",
      "name": "Sticky Note23"
    },
    {
      "parameters": {
        "operation": "delete",
        "tableId": "tabular_document_rows",
        "filters": {
          "conditions": [
            {
              "keyName": "record_manager_id",
              "condition": "eq",
              "keyValue": "={{ $('record_id').item.json.record_id }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -1056,
        -1280
      ],
      "id": "20d39ed0-aa4b-4e44-a40e-2739bd365c08",
      "name": "Delete Old Data Rows",
      "alwaysOutputData": true,
      "executeOnce": true,
      "credentials": {
        "supabaseApi": {
          "id": "wwbxqbDc4H2RPQ1Y",
          "name": "Supabase account (AW)"
        }
      }
    },
    {
      "parameters": {
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "tabular_document_rows",
          "mode": "list",
          "cachedResultName": "tabular_document_rows"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "row_data": "={{ $json.toJsonString().replaceAll(/'/g, \"''\") }}",
            "record_manager_id": "={{ $('record_id').item.json.record_id }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "created_at",
              "displayName": "created_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "record_manager_id",
              "displayName": "record_manager_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "row_data",
              "displayName": "row_data",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "object",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -352,
        -1280
      ],
      "id": "6243db3f-4382-473f-8146-d8faa2c0343f",
      "name": "Insert rows in a table",
      "credentials": {
        "postgres": {
          "id": "7aOzWLaZcz9dgeSv",
          "name": "Postgres account (Supabase AW)"
        }
      }
    },
    {
      "parameters": {
        "fieldToSplitOut": "=data_rows",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        -576,
        -1280
      ],
      "id": "b8cce715-ce18-4e1f-8136-3d0478df80aa",
      "name": "Split Out"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "c9e3737c-f583-4bc3-8d89-31deb8a4a167",
                    "leftValue": "={{ $('Set Text (Merged)').item.json.data_type }}",
                    "rightValue": "tabular",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Tabular data"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('Set Text (Merged)').item.json.data_type }}",
                    "rightValue": "unstructured",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "b013e0cd-4c9f-4123-84cf-91f87b92dc76"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Unstructured data"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -1328,
        -288
      ],
      "id": "b245a979-cb02-4086-8d67-6b807c8baae7",
      "name": "Check data type"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "8feea590-03e5-4da9-acf1-071537ee5b92",
              "name": "data_rows",
              "value": "={{ $('Set Text (Merged)').item.json.data_rows }}",
              "type": "array"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -816,
        -1280
      ],
      "id": "448b1a93-765d-4653-8870-21507fed0ae6",
      "name": "data_rows"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        3472,
        -784
      ],
      "id": "7416c05a-121b-45e6-8cf1-ae4a2bc74b5a",
      "name": "No Operation, do nothing3"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "2cb5d7fc-ea46-460e-bb1e-21756214930a",
              "name": "record_id",
              "value": "={{ $json.id }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1504,
        -288
      ],
      "id": "3d2f3028-5921-4b2e-ba84-4c7428071445",
      "name": "record_id"
    },
    {
      "parameters": {
        "operation": "download",
        "fileId": {
          "__rl": true,
          "value": "={{ $('Loop Over Items').item.json.id }}",
          "mode": "id"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        -672,
        -2576
      ],
      "id": "e72a02c7-9d83-4bf5-9e7e-47443cddf8ed",
      "name": "Download File2",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "29hh4KY4MeILFO9p",
          "name": "Google Drive Account - TheAIAutomators Team"
        }
      }
    },
    {
      "parameters": {
        "operation": "download",
        "fileId": {
          "__rl": true,
          "value": "={{ $('Loop Over Items').item.json.id }}",
          "mode": "id"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        -672,
        -2384
      ],
      "id": "532e507c-58cc-4244-8bb0-34f108b2618a",
      "name": "Download File3",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "29hh4KY4MeILFO9p",
          "name": "Google Drive Account - TheAIAutomators Team"
        }
      }
    },
    {
      "parameters": {
        "operation": "download",
        "fileId": {
          "__rl": true,
          "value": "={{ $('Loop Over Items').item.json.id }}",
          "mode": "id"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        32,
        -3168
      ],
      "id": "ebd95ddc-7a19-47e9-8a2e-01300d4c2aa6",
      "name": "Download File4",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "29hh4KY4MeILFO9p",
          "name": "Google Drive Account - TheAIAutomators Team"
        }
      }
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "xYznj1HOqGxHjDN9",
          "mode": "list",
          "cachedResultName": "Multimodal RAG - TheAIAutomators - SOTA RAG Sub-workflow - 1.0 Active"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "binary_file": "={{ $json.data_base64 }}"
          },
          "matchingColumns": [
            "binary_file"
          ],
          "schema": [
            {
              "id": "binary_file",
              "displayName": "binary_file",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        624,
        -3168
      ],
      "id": "0929c4bc-5ee9-455d-962a-d9e7ad9b78cc",
      "name": "Execute Workflow"
    },
    {
      "parameters": {
        "operation": "binaryToPropery",
        "destinationKey": "data_base64",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        336,
        -3168
      ],
      "id": "71bdc734-de55-4d85-a150-a650122935c4",
      "name": "Extract from File1"
    },
    {
      "parameters": {
        "content": "Multimodal RAG sub-workflow must be configured if Multimodal is enabled in the \"Set Data\" node.",
        "height": 100
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        192,
        -3296
      ],
      "id": "93eda17f-0b43-400b-9233-044ced1a5ce6",
      "name": "Sticky Note24"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "A6uZWZp8UkcxmaZp",
          "mode": "list",
          "cachedResultName": "Knowledge Graph Updates - STOA RAG Blueprint - v1.0"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "record_manager_item_json": "={{ $('Search Record Manager').item.json }}",
            "record_manager_item_json_hash": "={{ $('Search Record Manager').item.json.hash }}",
            "new_hash": "={{ $('Generate Hash').item.json.hash }}",
            "text": "={{ JSON.stringify($('Set Text (Merged)').item.json.text) }}",
            "doc_id": "={{ $('Set Data').first().json.doc_id }}",
            "supabase_row_id": "={{ $('Create Row in Record Manager').isExecuted ? $('Create Row in Record Manager').item.json.id : $('Search Record Manager').item.json.id }}",
            "graph_id": "={{ $('Search Record Manager').item.json.graph_id}}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "record_manager_item_json",
              "displayName": "record_manager_item_json",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "object"
            },
            {
              "id": "record_manager_item_json_hash",
              "displayName": "record_manager_item_json_hash",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "new_hash",
              "displayName": "new_hash",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "doc_id",
              "displayName": "doc_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "text",
              "displayName": "text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "supabase_row_id",
              "displayName": "supabase_row_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "number"
            },
            {
              "id": "graph_id",
              "displayName": "graph_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "mode": "each",
        "options": {
          "waitForSubWorkflow": true
        }
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        -592,
        -912
      ],
      "id": "9d3877a7-6159-4e4e-af8d-07414493f717",
      "name": "Execute Knowledge Graph Updates"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "15ce0e44-3fcb-4b60-83b6-8e6e721ff266",
              "leftValue": "={{ $('Set Data').first().json.contextual_embedding_enabled }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1680,
        -448
      ],
      "id": "74cae579-db2a-41ae-9186-c707b1373176",
      "name": "Contextual embedding enabled?"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "63096a5f-5247-474b-95b4-cbeadca1f982",
              "name": "chunk",
              "value": "={{ $json.choices[0].message.content }} - {{ $('Loop over Chunks').item.json.chunk }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2480,
        -576
      ],
      "id": "42da953d-b47f-4227-9a15-7970e54b72ff",
      "name": "Chunk with contextual embedding"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "63096a5f-5247-474b-95b4-cbeadca1f982",
              "name": "chunk",
              "value": "={{ $json.choices[0].message.content }} - {{ $('Loop over Chunks').item.json.chunk }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2480,
        -384
      ],
      "id": "8948a3cb-5bb9-4f3e-acb4-9f8a04cb52d9",
      "name": "Chunk without contextual embedding"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "c9e3737c-f583-4bc3-8d89-31deb8a4a167",
                    "leftValue": "={{ $('Set Text (Merged)').item.json.data_type }}",
                    "rightValue": "tabular",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Tabular data"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('Set Text (Merged)').item.json.data_type }}",
                    "rightValue": "unstructured",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "b013e0cd-4c9f-4123-84cf-91f87b92dc76"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Unstructured data"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -912,
        -944
      ],
      "id": "9febc538-58e5-4664-8f32-30cbba540727",
      "name": "Check data type1"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-5",
          "mode": "list",
          "cachedResultName": "gpt-5"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -416,
        1184
      ],
      "id": "957af132-f8c9-4593-8b49-8b6932eac510",
      "name": "OpenAI Chat Model1",
      "credentials": {
        "openAiApi": {
          "id": "MM0xMOJkVoJoWOLP",
          "name": "OpenAi account AW"
        }
      }
    },
    {
      "parameters": {
        "content": "# State-of-the-Art RAG Agent (With Long Term Memory)",
        "height": 600,
        "width": 2124,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -992,
        752
      ],
      "id": "64d00073-45e1-4669-8526-7595ca90a788",
      "name": "Sticky Note20"
    },
    {
      "parameters": {
        "name": "Query_Vector_Store",
        "description": "Call this to query data from our vector store knowledgebase",
        "workflowId": {
          "__rl": true,
          "value": "A4BVrX5qYlJ7HUMI",
          "mode": "list",
          "cachedResultName": "TheAIAutomators.com - RAG Masterclass - Lesson 9 - STOA - v2.0 Dev 0.3"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "query": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('query', ``, 'string') }}",
            "session_id": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('session_id', ``, 'string') }}",
            "type": "vector"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "query",
              "displayName": "query",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "type",
              "displayName": "type",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "session_id",
              "displayName": "session_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2.1,
      "position": [
        240,
        1184
      ],
      "id": "a2385a5a-656a-4b1c-8a56-9f64cfc2d86c",
      "name": "Query Vector Store1"
    },
    {
      "parameters": {
        "name": "Query_Knowledge_Graph",
        "description": "Call this to query data from our knowledge graph",
        "workflowId": {
          "__rl": true,
          "value": "A4BVrX5qYlJ7HUMI",
          "mode": "list",
          "cachedResultName": "TheAIAutomators.com - RAG Masterclass - Lesson 9 - STOA - v2.0 Dev 0.3"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "query": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('query', ``, 'string') }}",
            "session_id": "=",
            "type": "graph"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "query",
              "displayName": "query",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "type",
              "displayName": "type",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "session_id",
              "displayName": "session_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2.1,
      "position": [
        400,
        1184
      ],
      "id": "16ca432f-bf3f-4b4a-9f56-dc55af8b6fc5",
      "name": "Query Knowledge Graph1",
      "retryOnFail": true,
      "maxTries": 5,
      "waitBetweenTries": 5000
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('When chat message received').item.json.chatInput }}",
        "options": {
          "systemMessage": "=---Role---\n\nYou are a helpful assistant responding to a user's query based on the information provided by the Vector and Graph tools and structured datasets.\n\n---Goal---\n\nYou are tasked with creating and executing a retrieval strategy to best answer the users question.\n\nThe output should be a well-reserached response to the users query based on the output from these tools and to follow the Response Rules set about below.\n\nYou must consider both the conversation history and the current query.\n\nIf the question involves tabular data—such as calculating sums, averages, or finding maximum values—the vector store and graph tools may be unreliable. In that case, start by reviewing the available datasets, identify the ones most likely to contain the answer, and then construct a SQL query to analyze them.\n\nYour goal is to provide an accurate answer based on the output from these tools ONLY.\n\n---Response Rules---\n\n- Ideal target format and length: Multiple Paragraphs\n- Use markdown formatting with appropriate section headings\n- Please respond in the same language as the user's question.\n- If there are images provided from the retrieved information, you should return this in markdown format.\n- Ensure the response maintains continuity with the conversation history.\n- List up to 5 most important reference sources at the end under \"References\" section. Clearly indicating whether each source is from, such as Vector Store (VS)\n- If you cannot answer the question using the provided information or if no information is returned from the tools, say \"Sorry I don't know\".\n- Do not make anything up. \n- Do not include information not provided by the Knowledge Bases.\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        -240,
        928
      ],
      "id": "5108548d-949f-4098-8d4e-12f17d897dcb",
      "name": "Agentic RAG1",
      "retryOnFail": true,
      "maxTries": 5
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        -256,
        1184
      ],
      "id": "9b24b748-0f12-4997-8be1-d484d53a287f",
      "name": "Supabase Short-Term Memory2",
      "credentials": {
        "postgres": {
          "id": "7aOzWLaZcz9dgeSv",
          "name": "Postgres account (Supabase AW)"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.getzep.com/api/v2/graph/search",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"user_id\": \"{{ $json.user_id }}\",\n  \"query\": {{ JSON.stringify($('When chat message received').item.json.chatInput) }},\n  \"scope\": \"edges\",\n  \"limit\": 5,\n  \"search_filters\": {\n    \"min_relevance\": 0.7\n  }\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -448,
        928
      ],
      "id": "b4f84504-1ef0-45a9-b19f-86377f38f1c3",
      "name": "Get Long Term Memories",
      "credentials": {
        "zepApi": {
          "id": "lGWdzUJKbAFBqqTT",
          "name": "Zep Api account"
        },
        "httpHeaderAuth": {
          "id": "7Hvk0jyX94eRC3jd",
          "name": "Zep Account (AW)"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        288,
        976
      ],
      "id": "a2efa140-190b-4870-907f-6fe2000d58b3",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.getzep.com/api/v2/sessions/{{ $('When chat message received').item.json.sessionId }}/memory",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"user_id\": \"{{ $('user_id').item.json.user_id }}\",\n  \"session_id\": \"{{ $('When chat message received').item.json.sessionId }}\",\n  \"messages\": [\n    {\n      \"role_type\": \"user\",\n      \"content\": {{ JSON.stringify($('When chat message received').item.json.chatInput) }}\n    },\n    {\n      \"role_type\": \"assistant\",\n      \"content\": {{ JSON.stringify($json.output) }}\n    }\n  ]\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        288,
        800
      ],
      "id": "df7d8da7-da80-4c0f-8fd3-b34ed2d64d57",
      "name": "Update Long Term Memories",
      "credentials": {
        "zepApi": {
          "id": "lGWdzUJKbAFBqqTT",
          "name": "Zep Api account"
        },
        "httpHeaderAuth": {
          "id": "7Hvk0jyX94eRC3jd",
          "name": "Zep Account (AW)"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "c2e95998-ad5f-4676-b307-b91f5c4adaad",
              "name": "user_id",
              "value": "user123",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -672,
        928
      ],
      "id": "53bbd593-cde9-4fca-8dff-7bb219a2bff3",
      "name": "user_id"
    },
    {
      "parameters": {
        "content": "Note: This template uses n8n chat and by default, this long term memory is shared across all chat sessions. To maintain separate long term memories for different users, check out our community post here, as there are multiple approaches for this depending on how you're deploying the agent. ",
        "height": 192,
        "width": 256
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -752,
        1088
      ],
      "typeVersion": 1,
      "id": "f346294e-38e0-4cf3-bda7-c1f73b13fd9f",
      "name": "Sticky Note25"
    },
    {
      "parameters": {
        "content": "### TODO: Add User ID here",
        "height": 200,
        "width": 232
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -736,
        880
      ],
      "id": "d0e028b1-48fa-46d2-bb6b-9d70ae8248e1",
      "name": "Sticky Note26"
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Execute a SQL query on the tabular_document_rows table. \n\nInstructions:\n\nYou will always be querying based on a specific id.\n\nEach row in the table contains a row_data field (of type jsonb) that holds the data for that row, with keys matching the file schema defined in the record_manager table.\n\nThe record_manager_id is the id field from the record_manager table. Always filter based on this specific id when querying the tabular_document_rows table.\n\nWhen writing your SELECT clause, extract values from the row_data JSON using the ->> operator and cast them as needed (e.g., to numeric for calculations).\n\nWhen applying WHERE clauses, you should run SELECT DISTINCT queries (LIMIT 100) on the relevant fields first to understand the valid options. This applies even if the user provides a specific value—you must verify that the value exists in the data before using it.\n\nDo NOT run SELECT DISTINCT queries for ID columns.\n\nItems within your SELECT needs to use the data within row_data field.\n\nExample query: Find maximum value for a field (e.g. \"profit\")\n\nSELECT MAX((row_data->>'profit')::numeric) AS max_profit\nFROM tabular_document_rows\nWHERE file_id = '123';\n\nExample query: Group and aggregate (e.g. total revenue by country)\n\nSELECT row_data->>'country' AS country,\n       SUM((row_data->>'revenue')::numeric) AS total_revenue\nFROM tabular_document_rows\nWHERE record_manager_id = '123'\nGROUP BY row_data->>'country';\n\nExample query: Group and aggregate (e.g. total revenue by country)\nSELECT row_data->>'salesperson' AS salesperson,\n       SUM((row_data->>'profit')::numeric) AS total_profit\nFROM tabular_document_rows\nWHERE record_manager_id = '123'\nGROUP BY row_data->>'salesperson';",
        "operation": "executeQuery",
        "query": "{{ $fromAI('sql_query') }}",
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.5,
      "position": [
        -1680,
        1152
      ],
      "id": "7cb8a4c8-5aa9-4c6f-8f99-b67d0c11f3a0",
      "name": "Query Tabular Rows",
      "credentials": {
        "postgres": {
          "id": "7aOzWLaZcz9dgeSv",
          "name": "Postgres account (Supabase AW)"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Use this tool to fetch all available documents from the record_manager, this will include the table schema and the id",
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "record_manager_v2",
          "mode": "list",
          "cachedResultName": "record_manager_v2"
        },
        "returnAll": true,
        "where": {
          "values": [
            {
              "column": "data_type",
              "value": "tabular"
            }
          ]
        },
        "options": {
          "outputColumns": [
            "id",
            "document_title",
            "schema"
          ]
        }
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.5,
      "position": [
        -1840,
        1152
      ],
      "id": "e047f8a7-7232-4491-b569-881dfdd1905b",
      "name": "Get datasets from record_manager",
      "credentials": {
        "postgres": {
          "id": "7aOzWLaZcz9dgeSv",
          "name": "Postgres account (Supabase AW)"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Execute a SQL query on the tabular_document_rows table.\n\nInstructions:\n\nYou will always be querying based on a specific id.\n\nEach row in the table contains a row_data field (of type jsonb) that holds the data for that row, with keys matching the file schema defined in the record_manager table.\n\nThe record_manager_id is the id field from the record_manager table. Always filter based on this specific id when querying the tabular_document_rows table.\n\nWhen writing your SELECT clause, extract values from the row_data JSON using the ->> operator and cast them as needed (e.g., to numeric for calculations).\n\nItems within your SELECT needs to use the data within row_data field.\n\nExample query: Find maximum value for a field (e.g. \"profit\")\n\nSELECT MAX((row_data->>'profit')::numeric) AS max_profit\nFROM tabular_document_rows\nWHERE file_id = '123';\n\nExample query: Group and aggregate (e.g. total revenue by country)\n\nSELECT row_data->>'country' AS country,\n       SUM((row_data->>'revenue')::numeric) AS total_revenue\nFROM tabular_document_rows\nWHERE record_manager_id = '123'\nGROUP BY row_data->>'country';\n\nExample query: Group and aggregate (e.g. total revenue by country)\nSELECT row_data->>'salesperson' AS salesperson,\n       SUM((row_data->>'profit')::numeric) AS total_profit\nFROM tabular_document_rows\nWHERE record_manager_id = '123'\nGROUP BY row_data->>'salesperson';",
        "operation": "executeQuery",
        "query": "{{ $fromAI('sql_query') }}",
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.5,
      "position": [
        64,
        1184
      ],
      "id": "8918444f-7af4-4e30-a5ac-3e49ae53c331",
      "name": "Query Tabular Rows1",
      "credentials": {
        "postgres": {
          "id": "7aOzWLaZcz9dgeSv",
          "name": "Postgres account (Supabase AW)"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Use this tool to fetch all available documents from the record_manager, this will include the table schema and the id",
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "record_manager_v2",
          "mode": "list",
          "cachedResultName": "record_manager_v2"
        },
        "returnAll": true,
        "where": {
          "values": [
            {
              "column": "data_type",
              "value": "tabular"
            }
          ]
        },
        "options": {
          "outputColumns": [
            "id",
            "document_title",
            "schema"
          ]
        }
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.5,
      "position": [
        -96,
        1184
      ],
      "id": "4d8abe06-45bb-4c5c-ab1e-143329f103b8",
      "name": "Get datasets from record_manager1",
      "credentials": {
        "postgres": {
          "id": "7aOzWLaZcz9dgeSv",
          "name": "Postgres account (Supabase AW)"
        }
      }
    },
    {
      "parameters": {
        "operation": "delete",
        "tableId": "tabular_document_rows",
        "filters": {
          "conditions": [
            {
              "keyName": "record_manager_id",
              "condition": "eq",
              "keyValue": "={{ $('Search Record Manager1').item.json.id }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -2048,
        -4160
      ],
      "id": "66fd04b5-f70d-44a0-b786-95e0e4771e12",
      "name": "Delete Old Tabular Data Rows",
      "alwaysOutputData": true,
      "executeOnce": true,
      "credentials": {
        "supabaseApi": {
          "id": "wwbxqbDc4H2RPQ1Y",
          "name": "Supabase account (AW)"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.getzep.com/api/v2/users",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\"user_id\":\"user123\"}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        800,
        1056
      ],
      "id": "f5c1fdcc-cffa-4be7-ab16-7114a0eb736a",
      "name": "Create Zep User",
      "credentials": {
        "zepApi": {
          "id": "lGWdzUJKbAFBqqTT",
          "name": "Zep Api account"
        },
        "httpHeaderAuth": {
          "id": "7Hvk0jyX94eRC3jd",
          "name": "Zep Account (AW)"
        }
      }
    },
    {
      "parameters": {
        "content": "### TODO: Run this node once to manually create a Zep user",
        "height": 264,
        "width": 232
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        736,
        960
      ],
      "id": "198de388-241c-4828-8be8-f275ff09ffbe",
      "name": "Sticky Note27"
    }
  ],
  "pinData": {},
  "connections": {
    "When chat message received": {
      "main": [
        [
          {
            "node": "user_id",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Agentic RAG",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI1": {
      "ai_embedding": [
        [
          {
            "node": "Supabase Vector Store1",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Default Data Loader": {
      "ai_document": [
        [
          {
            "node": "Supabase Vector Store1",
            "type": "ai_document",
            "index": 0
          }
        ]
      ]
    },
    "Recursive Character Text Splitter": {
      "ai_textSplitter": [
        [
          {
            "node": "Default Data Loader",
            "type": "ai_textSplitter",
            "index": 0
          }
        ]
      ]
    },
    "Generate Hash": {
      "main": [
        [
          {
            "node": "Search Record Manager",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download File": {
      "main": [
        [
          {
            "node": "Extract from File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Search Record Manager": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Row in Record Manager": {
      "main": [
        [
          {
            "node": "record_id",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "Set Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase Vector Store1": {
      "main": [
        [
          {
            "node": "Loop over Chunks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Delete Previous Vectors": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update our Record Manager": {
      "main": [
        [
          {
            "node": "record_id",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate": {
      "main": [
        [
          {
            "node": "Update our Record Manager",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Text": {
      "main": [
        [
          {
            "node": "Set Text (Merged)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set up Text for Embedding": {
      "main": [
        [
          {
            "node": "Chunking",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File": {
      "main": [
        [
          {
            "node": "Set Text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload File": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "HTTP Request1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request1": {
      "main": [
        [
          {
            "node": "Aggregate Markdown",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate Markdown": {
      "main": [
        [
          {
            "node": "Set Text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "New Files": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Updated Files": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Delete Files": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Delete Previous Vectors1": {
      "main": [
        [
          {
            "node": "Aggregate1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate1": {
      "main": [
        [
          {
            "node": "Delete Record from Record Manager",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items1": {
      "main": [
        [],
        [
          {
            "node": "Search Record Manager1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Search Record Manager1": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Delete Previous Vectors1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Delete a file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Delete Record from Record Manager": {
      "main": [
        [
          {
            "node": "Delete Old Tabular Data Rows",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "If2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "Base64 the Markdown",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Switch1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Base64 the Markdown": {
      "main": [
        [
          {
            "node": "Convert to Binary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to Binary": {
      "main": [
        [
          {
            "node": "Switch1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Data": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If2": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If File": {
      "main": [
        [
          {
            "node": "Archive File",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Archive File": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download File1": {
      "main": [
        [
          {
            "node": "Upload File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Trigger Firecrawl",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Query Vector Store": {
      "ai_tool": [
        [
          {
            "node": "Agentic RAG",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "Switch2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Embedding From Query": {
      "main": [
        [
          {
            "node": "Trigger Hybrid Search",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Trigger Hybrid Search": {
      "main": [
        [
          {
            "node": "If3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Rerank with Cohere 3.5": {
      "main": [
        [
          {
            "node": "Return Reordered Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Array": {
      "main": [
        [
          {
            "node": "Rerank with Cohere 3.5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Chunking": {
      "main": [
        [
          {
            "node": "Loop over Chunks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop over Chunks": {
      "main": [
        [
          {
            "node": "Aggregate2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Contextual embedding enabled?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Chunk Description": {
      "main": [
        [
          {
            "node": "Chunk with contextual embedding",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Setup Chunk for Embedding": {
      "main": [
        [
          {
            "node": "Supabase Vector Store1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If3": {
      "main": [
        [
          {
            "node": "Create Array",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Is LightRAG enabled?1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Create Row in Record Manager",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Delete Previous Vectors",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate2": {
      "main": [
        [
          {
            "node": "If File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Query Knowledge Graph": {
      "ai_tool": [
        [
          {
            "node": "Agentic RAG",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Switch2": {
      "main": [
        [
          {
            "node": "Chat Memory Manager",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Query Graph",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Query Graph": {
      "main": [
        [
          {
            "node": "Tidy up response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser2": {
      "ai_outputParser": [
        [
          {
            "node": "Enrich",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model3": {
      "ai_languageModel": [
        [
          {
            "node": "Enrich",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Metadata Fields": {
      "main": [
        [
          {
            "node": "Prep",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prep": {
      "main": [
        [
          {
            "node": "Enrich",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Enrich": {
      "main": [
        [
          {
            "node": "Set up Text for Embedding",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Chat Memory Manager": {
      "main": [
        [
          {
            "node": "Fetch Metadata Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model4": {
      "ai_languageModel": [
        [
          {
            "node": "Prep Metadata1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Prep Metadata1",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Prep Metadata1": {
      "main": [
        [
          {
            "node": "Generate Embedding From Query",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Metadata Fields1": {
      "main": [
        [
          {
            "node": "Prep1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prep1": {
      "main": [
        [
          {
            "node": "Prep Metadata1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase Short-Term Memory": {
      "ai_memory": [
        [
          {
            "node": "Agentic RAG",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Supabase Short-Term Memory1": {
      "ai_memory": [
        [
          {
            "node": "Chat Memory Manager",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Delete a file": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Is LightRAG enabled?": {
      "main": [
        [
          {
            "node": "Execute Knowledge Graph Updates",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Fetch Metadata Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Is LightRAG enabled?1": {
      "main": [
        [
          {
            "node": "Check data type1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Operation, do nothing3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Is Multimodal enabled?": {
      "main": [
        [
          {
            "node": "Download File4",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Download File1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get a document": {
      "main": [
        [
          {
            "node": "Set Text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from Excel": {
      "main": [
        [
          {
            "node": "Aggregate3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from CSV": {
      "main": [
        [
          {
            "node": "Aggregate3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Summarize": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Get row(s) in sheet": {
      "main": [
        [
          {
            "node": "Aggregate3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Array keys": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Set Text for Tabular Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get google sheet info": {
      "main": [
        [
          {
            "node": "Get row(s) in sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate3": {
      "main": [
        [
          {
            "node": "Array keys",
            "type": "main",
            "index": 0
          },
          {
            "node": "Summarize",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "No Operation, do nothing2": {
      "main": [
        [
          {
            "node": "Generate Hash",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch1": {
      "main": [
        [
          {
            "node": "Get a document",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Is Multimodal enabled?",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Download File",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Download File2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Download File3",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get google sheet info",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Text (Merged)": {
      "main": [
        [
          {
            "node": "No Operation, do nothing2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Text for Tabular Data": {
      "main": [
        [
          {
            "node": "Set Text (Merged)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Delete Old Data Rows": {
      "main": [
        [
          {
            "node": "data_rows",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "Insert rows in a table",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check data type": {
      "main": [
        [
          {
            "node": "Delete Old Data Rows",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Is LightRAG enabled?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "data_rows": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insert rows in a table": {
      "main": [
        [
          {
            "node": "No Operation, do nothing3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "No Operation, do nothing3": {
      "main": [
        [
          {
            "node": "If File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "record_id": {
      "main": [
        [
          {
            "node": "Check data type",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download File2": {
      "main": [
        [
          {
            "node": "Extract from CSV",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download File3": {
      "main": [
        [
          {
            "node": "Extract from Excel",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download File4": {
      "main": [
        [
          {
            "node": "Extract from File1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Workflow": {
      "main": [
        [
          {
            "node": "Set Text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File1": {
      "main": [
        [
          {
            "node": "Execute Workflow",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Knowledge Graph Updates": {
      "main": [
        []
      ]
    },
    "Contextual embedding enabled?": {
      "main": [
        [
          {
            "node": "Generate Chunk Description",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Chunk without contextual embedding",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Chunk with contextual embedding": {
      "main": [
        [
          {
            "node": "Setup Chunk for Embedding",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Chunk without contextual embedding": {
      "main": [
        [
          {
            "node": "Setup Chunk for Embedding",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check data type1": {
      "main": [
        [],
        [
          {
            "node": "Execute Knowledge Graph Updates",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Agentic RAG1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Query Vector Store1": {
      "ai_tool": [
        [
          {
            "node": "Agentic RAG1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Query Knowledge Graph1": {
      "ai_tool": [
        [
          {
            "node": "Agentic RAG1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Supabase Short-Term Memory2": {
      "ai_memory": [
        [
          {
            "node": "Agentic RAG1",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Get Long Term Memories": {
      "main": [
        [
          {
            "node": "Agentic RAG1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Agentic RAG1": {
      "main": [
        [
          {
            "node": "Update Long Term Memories",
            "type": "main",
            "index": 0
          },
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Respond to Webhook": {
      "main": [
        []
      ]
    },
    "user_id": {
      "main": [
        [
          {
            "node": "Get Long Term Memories",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get datasets from record_manager": {
      "ai_tool": [
        [
          {
            "node": "Agentic RAG",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Query Tabular Rows": {
      "ai_tool": [
        [
          {
            "node": "Agentic RAG",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Query Tabular Rows1": {
      "ai_tool": [
        [
          {
            "node": "Agentic RAG1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get datasets from record_manager1": {
      "ai_tool": [
        [
          {
            "node": "Agentic RAG1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Delete Old Tabular Data Rows": {
      "main": [
        [
          {
            "node": "Delete a file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "372b93ae-1e6c-4ec6-8f0c-0a0eb847ea3a",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "b5d1ea132a4e071e6288b3143f31284b91560858bdef3f0c88a49f587fc91a29"
  },
  "id": "byVMKqXTUPW8JbAR",
  "tags": [
    {
      "createdAt": "2025-05-12T13:43:59.783Z",
      "updatedAt": "2025-05-12T13:43:59.783Z",
      "id": "d3ygIhrGjDmzgrW0",
      "name": "TheAIAutomators.com"
    }
  ]
}