// supabase/functions/vector-search/index.ts
import "jsr:@supabase/functions-js/edge-runtime.d.ts"; // Use Edge Runtime types
import { createClient } from "jsr:@supabase/supabase-js@2"; // Use jsr import
// Define CORS headers for consistency
const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Methods': 'POST, OPTIONS',
  // Ensure 'apikey' is allowed if you're testing with tools that send it explicitly
  'Access-Control-Allow-Headers': 'Content-Type, Authorization, apikey'
};
console.log("Vector Search function initializing...");
Deno.serve(async (req)=>{
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    console.log("Handling OPTIONS request");
    return new Response('ok', {
      headers: corsHeaders
    });
  }
  console.log(`Handling ${req.method} request to vector-search`);
  try {
    // Create Supabase client using environment variables and request auth header
    const supabaseClient = createClient(Deno.env.get('SUPABASE_URL'), Deno.env.get('SUPABASE_ANON_KEY'), {
      global: {
        headers: {
          // Pass original Authorization header for RLS/user context
          Authorization: req.headers.get('Authorization')
        }
      }
    });
    // Get the request body - expects { query_embedding: [...], match_count: N, filter: {...} }
    const body = await req.json();
    // --- Basic Validation (Recommended) ---
    if (!body.query_embedding || !Array.isArray(body.query_embedding) || body.query_embedding.length === 0) {
      throw new Error("Missing or invalid 'query_embedding' parameter (must be a non-empty array).");
    }
    // Optional: Add type checks for match_count (number) and filter (object) if needed
    // if (body.match_count !== undefined && typeof body.match_count !== 'number') ...
    // if (body.filter !== undefined && typeof body.filter !== 'object') ...
    // --------------------------------------
    console.log("Calling RPC: match_documents_v2_vector");
    // Call the specific vector search function, passing the body object as named arguments
    const { data, error } = await supabaseClient.rpc('match_documents_v2_vector', body);
    // Handle database errors
    if (error) {
      console.error('Supabase RPC Error:', error);
      // Re-throw the error to be caught by the main catch block
      throw error;
    }
    console.log("RPC call successful.");
    // Return the data from the function (includes 'similarity' score)
    return new Response(JSON.stringify(data), {
      headers: {
        ...corsHeaders,
        'Content-Type': 'application/json'
      },
      status: 200
    });
  } catch (error) {
    // Handle all errors (parsing, validation, RPC, etc.)
    console.error("Caught Error in vector-search function:", error);
    const errorMessage = error instanceof Error ? error.message : "An unexpected error occurred.";
    // Return 400 for validation errors, 500 for others (like DB errors)
    const status = errorMessage.includes('Missing or invalid') ? 400 : 500;
    return new Response(JSON.stringify({
      error: errorMessage
    }), {
      headers: {
        ...corsHeaders,
        'Content-Type': 'application/json'
      },
      status: status // Use determined status code
    });
  }
});
